# Default values for backend chart
replicaCount: 2

image:
  repository: your-registry/university-management-platform-backend
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 5000
  targetPort: 5000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: api.university-platform.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables for the backend
env:
  NODE_ENV: "production"
  PORT: "5000"
  # Database configuration
  MONGODB_URI: "mongodb+srv://your-mongodb-atlas-uri"
  # JWT configuration
  JWT_SECRET: "your-jwt-secret"
  JWT_EXPIRES_IN: "24h"
  # Firebase configuration
  FIREBASE_PROJECT_ID: "your-firebase-project-id"
  FIREBASE_PRIVATE_KEY: "your-firebase-private-key"
  FIREBASE_CLIENT_EMAIL: "your-firebase-client-email"
  # Email configuration
  SMTP_HOST: "smtp.gmail.com"
  SMTP_PORT: "587"
  SMTP_USER: "your-email@gmail.com"
  SMTP_PASS: "your-email-password"
  # File upload configuration
  UPLOAD_PATH: "/app/uploads"
  MAX_FILE_SIZE: "10mb"

# Secrets configuration
secrets:
  enabled: true
  secretName: "backend-secrets"
  data:
    MONGODB_URI: "base64-encoded-mongodb-uri"
    JWT_SECRET: "base64-encoded-jwt-secret"
    FIREBASE_PRIVATE_KEY: "base64-encoded-firebase-private-key"
    FIREBASE_CLIENT_EMAIL: "base64-encoded-firebase-client-email"
    SMTP_PASS: "base64-encoded-smtp-password"

# Health check configuration
livenessProbe:
  httpGet:
    path: /health
    port: 5000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 5000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# File upload configuration (for local development)
# For production, consider using cloud storage like AWS S3, Google Cloud Storage, or Azure Blob Storage
uploads:
  # Use cloud storage instead of persistent volumes
  cloudStorage: true
  # For local development, files will be stored in memory/temporary storage
  localPath: /tmp/uploads

# Database configuration (if using external database)
database:
  enabled: false
  type: "mongodb"
  host: "mongodb-service"
  port: 27017
  name: "university_management"
  username: ""
  password: "" 